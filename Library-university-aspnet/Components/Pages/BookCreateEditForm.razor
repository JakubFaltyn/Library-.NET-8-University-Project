@page "/edit-book"
@page "/edit-book/{Id:int}"
@inject IBookService BookService
@inject IAuthorService AuthorService
@inject IGenreService GenreService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="position-relative iq-banner">
    <div class="iq-navbar-header" style="height: 215px;">
        <div class="container-fluid iq-container">
            <div class="row">
                <div class="col-md-12">
                    <div class="flex-wrap d-flex justify-content-between align-items-center">
                        <div>
                            @if (Id is null)
                            {
                                <h1>Create Book</h1>

                            }
                            else
                            {
                                <h1>Edit "@CurrentBook.Title"</h1>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="iq-header-img">
            <img src="images/dashboard/top-header.png" alt="header"
                 class="theme-color-default-img img-fluid w-100 h-100 animated-scaleX">
            <img src="images/dashboard/top-header1.png" alt="header"
                 class="theme-color-purple-img img-fluid w-100 h-100 animated-scaleX">
            <img src="images/dashboard/top-header2.png" alt="header"
                 class="theme-color-blue-img img-fluid w-100 h-100 animated-scaleX">
            <img src="images/dashboard/top-header3.png" alt="header"
                 class="theme-color-green-img img-fluid w-100 h-100 animated-scaleX">
            <img src="images/dashboard/top-header4.png" alt="header"
                 class="theme-color-yellow-img img-fluid w-100 h-100 animated-scaleX">
            <img src="images/dashboard/top-header5.png" alt="header"
                 class="theme-color-pink-img img-fluid w-100 h-100 animated-scaleX">
        </div>
    </div>
</div>

<div class="conatiner-fluid content-inner mt-n5 py-0">
    <div>
        <div class="row">
            <div class="col-sm-12 col-lg-6 offset-sm-0 offset-lg-3">
                <div class="card">
                    <div class="card-header d-flex justify-content-between">
                        <div class="header-title">
                            <h4 class="card-title">Book</h4>
                        </div>
                    </div>
                    <div class="card-body">
                        <EditForm Model="CurrentBook" OnSubmit="HandleSubmit">
                            <div class="form-group">
                                <label class="form-label" for="title">Title</label>
                                <InputText id="title" @bind-Value="CurrentBook.Title" class="form-control" required />
                            </div>
                            <div class="form-group">
                                <label class="form-label" for="author">Author</label>
                                <InputText id="author" @bind-Value="CurrentAuthor.Name" class="form-control" required />
                            </div>
                            <div class="form-group">
                                <label class ="form-label" for="genre">Genre</label>
                                <InputText id="genre" @bind-Value="CurrentGenre.Name" class="form-control" required />
                            </div>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    public Book CurrentBook { get; set; } = new();
    public Author CurrentAuthor { get; set; } = new();
    public Genre CurrentGenre { get; set; } = new();
    public Author NewAuthor { get; set; } = new();
    public Genre NewGenre { get; set; } = new();


    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var book = await BookService.GetBookByIdAsync((int)Id);
            if (book is not null)
            {
                CurrentBook = book;
                var author = await AuthorService.GetAuthorByIdAsync(book.AuthorId);
                var genre = await GenreService.GetGenreByIdAsync(book.GenreId);

                if (author is not null)
                {
                    CurrentAuthor = author;
                }

                if (genre is not null)
                {
                    CurrentGenre = genre;
                }
            }
        }
    }

    async Task CreateIfNotExist()
    {
        @if (await AuthorService.CheckAuthorExistenceByName(CurrentAuthor.Name) == false)
        {
            NewAuthor.Name = CurrentAuthor.Name;
            await AuthorService.AddAuthorAsync(NewAuthor);
        }

        if (await GenreService.CheckGenreExistenceByName(CurrentGenre.Name) == false)
        {
            NewGenre.Name = CurrentGenre.Name;
            await GenreService.AddGenreAsync(NewGenre);
        }
    }

    async Task HandleSubmit()
    {
        await CreateIfNotExist();

        var author = await AuthorService.GetAuthorByNameAsync(CurrentAuthor.Name);
        CurrentBook.AuthorId = author.AuthorId;


        var genre = await GenreService.GetGenreByNameAsync(CurrentGenre.Name);
        CurrentBook.GenreId = genre.GenreId;

        if (Id is null)
        {

            await BookService.AddBookAsync(CurrentBook);
            NavigationManager.NavigateTo("/");
        }
        else
        {
             
            await BookService.UpdateBookAsync(CurrentBook, (int)Id);
            NavigationManager.NavigateTo("/");
        }
    }
}

